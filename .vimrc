
"–í—ã—Ä—É–±–∞–µ–º —Ä–µ–∂–∏–º —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å VI:
set nocompatible
filetype off    " required"

call plug#begin('~/.vim/plugged')

"Plags

"---------=== Code/project navigation ===-------------

Plug 'majutsushi/tagbar'	" Class/module browser
Plug 'scrooloose/nerdtree', {'on': 'NERDTreeToggle'} " Project and file navigation

"------------------=== Other ===----------------------

Plug 'vim-airline/vim-airline'		" Lean & mean status/tabline for vim
Plug 'fisadev/FixedTaskList.vim'		" Pending tasks list
Plug 'rosenfeld/conque-term'			" Consoles as buffers
Plug 'tpope/vim-surround'		" Parentheses, brackets, quotes, XML tags, and more
Plug 'kien/ctrlp.vim'
Plug 'jiangmiao/auto-pairs'
Plug 'terryma/vim-multiple-cursors' " multiple selections
Plug 'severin-lemaignan/vim-minimap' " A code minimap for Vim
Plug 'christoomey/vim-tmux-navigator' " TMux - Vim integration

"--------------=== Snippets support ===---------------
Plug 'garbas/vim-snipmate'		" Snippets manager
Plug 'MarcWeber/vim-addon-mw-utils'	" dependencies #1
Plug 'tomtom/tlib_vim'		" dependencies #2
Plug 'honza/vim-snippets'		" snippets repo
"---------------=== Languages support ===-------------
" --- Python ---
Plug 'klen/python-mode'	        " Python mode (docs, refactor, lints,
"  highlighting, run and ipdb and more)
Plug 'davidhalter/jedi-vim'		" Jedi-vim autocomplete plugin
Plug 'mitsuhiko/vim-jinja'		" Jinja support for vim
Plug 'mitsuhiko/vim-python-combined'  " Combined Python 2/3 for Vim

"---------------===    Colorschemes   ===-------------

Plug 'morhetz/gruvbox'

"---------------=== Control sessions  ===-------------

Plug 'xolox/vim-misc'
Plug 'xolox/vim-session'

"---------------=== Moving code     ===-------------

Plug 'matze/vim-move'

"---------------=== Comminting code ===-------------

Plug 'tomtom/tcomment_vim'

"---------------=== Show difference ===-------------

Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'Xuyuanp/nerdtree-git-plugin'

call plug#end()


filetype on
filetype plugin on
filetype plugin indent on

"=====================================================
"" General settings
"=====================================================
colorscheme gruvbox
set background=dark 
syntax on
set number
set cursorline
set cursorcolumn

" –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–∞ Tab
set tabstop=4
set shiftwidth=4
set smarttab

" –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞–∂–∏–º–∞–µ–º—ã—Ö –∫–ª–∞–≤–∏—à –≤ –Ω–æ—Ä–º–∞–ª—å–Ω–æ–º —Ä–µ–∂–∏–º–µ
:set showcmd

"  –ø—Ä–∏ –ø–µ—Ä–µ—Ö–æ–¥–µ –∑–∞ –≥—Ä–∞–Ω–∏—Ü—É –≤ 80 —Å–∏–º–≤–æ–ª–æ–≤ –≤ Ruby/Python/js/C/C++ –ø–æ–¥—Å–≤–µ—á–∏–≤–∞–µ–º
"  –Ω–∞ —Ç–µ–º–Ω–æ–º —Ñ–æ–Ω–µ —Ç–µ–∫—Å—Ç
augroup vimrc_autocmds
	autocmd!
	autocmd FileType ruby,python,javascript,c,cpp highlight Excess ctermbg=DarkGrey guibg=Black
	autocmd FileType ruby,python,javascript,c,cpp match Excess /\%80v.*/
	autocmd FileType ruby,python,javascript,c,cpp set nowrap
augroup END

" —É–∫–∞–∑—ã–≤–∞–µ–º –∫–∞—Ç–∞–ª–æ–≥ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ SnipMate
let g:snippets_dir = "~/.vim/vim-snippets/snippets"

" TagBar –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
map <F4> :TagbarToggle<CR>
let g:tagbar_autofocus = 0 " –∞–≤—Ç–æ—Ñ–æ–∫—É—Å –Ω–∞ Tagbar –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏

" NerdTree –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
" –ø–æ–∫–∞–∑–∞—Ç—å NERDTree –Ω–∞ Ctrl+n
map <C-n> :NERDTreeToggle<CR>
" "–∏–≥–Ω–æ—Ä—Ä–∏—Ä—É–µ–º—ã–µ —Ñ–∞–π–ª—ã —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è–º–∏
let NERDTreeIgnore=['__pycache__', '\.pyc$', '\.o$', '\.swp',  '*\.swp', '\~$', '\.pyc$', '\.pyo$', '\.class$', 'pip-log\.txt$', '\.o$']  

" TaskList –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
map <F2> :TaskList<CR> 	   " –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞—Å–∫–æ–≤ –Ω–∞ F2

 
" –ö–æ–ø–∏/–ø–∞—Å—Ç –ø–æ Ctrl+C/Ctrl+V
vmap <C-C> "+yi
imap <C-V> "+gPi

" –ö–æ–ø—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ —Å –±—É—Ñ–µ—Ä –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
set clipboard=unnamedplus

"Settings for sessions
let g:session_autosave = 'yes'
let g:session_default_to_last = 1
let g:session_autoloat = 'yes'

"Colorsheme for code map
let g:minimap_highlight='Visual'

"Settings for airline
let g:airline_theme = 'dark'
let g:airline_enable_fugitive = 1
let g:airline_enable_syntastic = 1
let g:airline_enable_bufferline = 1
let g:airline_powerline_fonts = 1

if !exists('g:airline_symbols')
    let g:airline_symbols = {}
  endif

  " unicode symbols
  " let g:airline_left_sep = '¬ª'
  " let g:airline_left_sep = '‚ñ∂'
  " let g:airline_right_sep = '¬´'
  " let g:airline_right_sep = '‚óÄ'
  let g:airline_symbols.crypt = 'üîí'
  " let g:airline_symbols.linenr = '‚ò∞'
  " let g:airline_symbols.linenr = '‚êä'
  " let g:airline_symbols.linenr = '‚ê§'
  " let g:airline_symbols.linenr = '¬∂'
  " let g:airline_symbols.maxlinenr = ''
  " let g:airline_symbols.maxlinenr = '„èë'
  " let g:airline_symbols.branch = '‚éá'
  " let g:airline_symbols.paste = 'œÅ'
  " let g:airline_symbols.paste = '√û'
  let g:airline_symbols.paste = '‚à•'
  let g:airline_symbols.spell = 'Íû®'
  let g:airline_symbols.notexists = '‚àÑ'
  let g:airline_symbols.whitespace = 'Œû'

  " powerline symbols
 " let g:airline_left_sep = 'ÓÇ∞'
 " let g:airline_left_alt_sep = 'ÓÇ±'
 " let g:airline_right_sep = 'ÓÇ≤'
 " let g:airline_right_alt_sep = 'ÓÇ≥'
 " let g:airline_symbols.branch = 'ÓÇ†'
 " let g:airline_symbols.readonly = 'ÓÇ¢'
 " let g:airline_symbols.linenr = '‚ò∞'
 " let g:airline_symbols.maxlinenr = 'ÓÇ°'

  " old vim-powerline symbols
  "let g:airline_left_sep = '‚ÆÄ'
  "let g:airline_left_alt_sep = '‚ÆÅ'
  "let g:airline_right_sep = '‚ÆÇ'
  "let g:airline_right_alt_sep = '‚ÆÉ'
  "let g:airline_symbols.branch = '‚≠†'
  "let g:airline_symbols.readonly = '‚≠§'
  "let g:airline_symbols.linenr = '‚≠°'

"=====================================================
"" Python-mode settings
"=====================================================
" –æ—Ç–∫–ª—é—á–∞–µ–º –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç –ø–æ –∫–æ–¥—É (—É –Ω–∞—Å –≤–º–µ—Å—Ç–æ –Ω–µ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è jedi-vim)
let g:pymode_python = 'python3'
let g:pymode_rope = 0
let g:pymode_rope_completion = 0
let g:pymode_rope_complete_on_dot = 0

" –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
let g:pymode_doc = 0
let g:pymode_doc_key = 'K'
" –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞
let g:pymode_lint = 1
let g:pymode_lint_checkers = ['pylint','pyflakes', 'pep8']
"let g:pymode_lint_ignore="E501,W601,C0110"
" –ø—Ä–æ–≤–µ–∫–∞ –∫–æ–¥–∞ –ø–æ—Å–ª–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
let g:pymode_lint_write = 1



" –ø–æ–¥–¥–µ—Ä–∂–∫–∞ virtualenv
let g:pymode_virtualenv = 1

" —É—Å—Ç–∞–Ω–æ–≤–∫–∞ breakpoints
let g:pymode_breakpoint = 1
let g:pymode_breakpoint_key = '<leader>b'

" –ø–æ–¥—Å—Ç–≤–µ—Ç–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞
let g:pymode_syntax = 1
let g:pymode_syntax_all = 1
let g:pymode_syntax_indent_errors = g:pymode_syntax_all
let g:pymode_syntax_space_errors = g:pymode_syntax_all

" –æ—Ç–∫–ª—é—á–∏—Ç—å autofold –ø–æ –∫–æ–¥—É
let g:pymode_folding = 0

" –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—É—Å–∫–∞—Ç—å –∫–æ–¥
let g:pymode_run = 1
let g:pymode_run_bind = '<leader>+'
"=====================================================
"" User hotkeys
"=====================================================
" ConqueTerm
" –∑–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ç–æ—Ä–∞ –Ω–∞ F5
nnoremap <F5> :ConqueTermSplit ipython<CR>
" –∞ debug-mode –Ω–∞ <F6>
nnoremap <F6> :exe "ConqueTermSplit ipython " . expand("%")<CR>
let g:ConqueTerm_Syntax = 'python'
let g:ConqueTerm_StartMessages = 0
let g:ConqueTerm_CloseOnEnd = 0
" –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å PEP8 —á–µ—Ä–µ–∑ <leader>8
autocmd FileType python map <buffer> <leader>8 :PymodeLint<CR>

" –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç —á–µ—Ä–µ–∑ <Ctrl+Space>
inoremap <C-space> <C-x><C-o>"

" Changing key modifier for vim-move
let g:move_key_modifier = 'C'

" Settings mapping for multy cursour
let g:multi_cursor_use_default_mapping=0

let g:multi_cursor_start_word_key      = '<C-M>'
let g:multi_cursor_select_all_word_key = '<C-v>'
let g:multi_cursor_start_key           = 'g<C-M>'
let g:multi_cursor_select_all_key      = 'g<C-v>'
let g:multi_cursor_next_key            = '<C-M>'
let g:multi_cursor_prev_key            = '<C-B>'
let g:multi_cursor_skip_key            = '<C-X>'
let g:multi_cursor_quit_key            = '<Esc>'
